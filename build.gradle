plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.173'
    id 'net.neoforged.gradle.mixin'   version '7.0.173'
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

version = mod_version
group   = mod_group_id
base { archivesName = mod_id }

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

repositories {
    mavenLocal()
    maven { url = 'https://maven.neoforged.net/releases' }
    maven { url = 'https://jitpack.io' }
    mavenCentral()
    // Official Modrinth Maven for mods:
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url  = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "maven.modrinth:immersive-portals-neoforge:${immersive_portals_version}"
    localRuntime  "maven.modrinth:immersive-portals-neoforge:${immersive_portals_version}"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testRuntimeOnly  'org.junit.jupiter:junit-jupiter-engine:5.10.1'
}

/* -------------------------------------------------
   Native Rust build & packaging
-------------------------------------------------- */
import org.gradle.internal.os.OperatingSystem

ext {
    rustTarget = {
        if (OperatingSystem.current().isWindows())   return 'x86_64-pc-windows-gnu'
        if (OperatingSystem.current().isMacOsX())    return 'x86_64-apple-darwin'
        return 'x86_64-unknown-linux-gnu'
    }.call()

    nativeName = { tgt ->
        return tgt.startsWith('x86_64-pc-windows') ? 'orbit_engine.dll'
             : tgt.startsWith('x86_64-apple')      ? 'liborbit_engine.dylib'
             :                                       'liborbit_engine.so'
    }.call(rustTarget)
}

tasks.register('buildNative', Exec) {
    workingDir "$projectDir/rust/orbit_engine"
    commandLine 'cargo', 'build', '--release', '--target', rustTarget
    inputs.dir   'src'
    outputs.file "$projectDir/rust/orbit_engine/target/${rustTarget}/release/${nativeName}"
}

tasks.register('includeNative', Copy) {
    dependsOn 'buildNative'
    from "$projectDir/rust/orbit_engine/target/${rustTarget}/release/${nativeName}"
    into "$buildDir/resources/main/natives/${rustTarget}"
}

tasks.withType(ProcessResources).configureEach {
    dependsOn 'includeNative'

    def props = [
        minecraft_version      : minecraft_version,
        minecraft_version_range: minecraft_version_range,
        neo_version            : neo_version,
        neo_version_range      : neo_version_range,
        loader_version_range   : loader_version_range,
        mod_id                 : mod_id,
        mod_name               : mod_name,
        mod_license            : mod_license,
        mod_version            : mod_version,
        mod_authors            : mod_authors,
        mod_description        : mod_description
    ]
    inputs.properties props
    filesMatching('META-INF/neoforge.mods.toml') { expand props }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }
    client  { systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id }
    server  { argument '--nogui' }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
